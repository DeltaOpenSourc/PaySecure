from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite
import aiohttp
import os
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("TOKEN")


bot = Bot(token=TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    waiting_for_service_choice = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_inn = State()
    waiting_for_comment = State()

    partner_name = State()
    partner_city = State()
    partner_experience = State()
    partner_telegram = State()

    invoice_valuta = State()
    invoice_strana = State()
    invoice_summa = State()
    invoice_screen = State()
    invoice_comm = State()

    strana_other = State()
    strana_name = State()
    strana_telegram = State()
    strana_comm = State()
    strana_fer = State()
    strana_sv = State()
    strana_strana = State()

    manager = State()


MAIN_MENU_BUTTONS = [
    ("–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É", "menu_card"),
    ("–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", "menu_invoice"),
    ("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "menu_question"),
    ("–û –Ω–∞—Å", "menu_about"),
    ("–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", "menu_partner"),
]

MAIN_CARD_BUTTONS = [
    ("üáπüá∑ –¢—É—Ä—Ü–∏—è", "strana_turcian"),
    ("üá¶üá™ –û–ê–≠", "strana_oae"),
    ("üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", "strana_tadzhikistan"),
    ("–î—Ä—É–≥–∞—è", "strana_other"),
]

MAIN_FEART_BUTTONS = [
    ("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "zayvka"),
]

def main_menu_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_MENU_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

def main_feart_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_FEART_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

def main_card_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()


async def get_services():
    async with aiosqlite.connect("services.db") as db:
        cursor = await db.execute("SELECT id, name FROM services")
        services = await cursor.fetchall()
        await cursor.close()
    return services

async def services_keyboard():
    services = await get_services()
    kb_builder = InlineKeyboardBuilder()
    for service_id, service_name in services:
        kb_builder.button(text=service_name, callback_data=f"service_{service_id}")
    kb_builder.adjust(1)
    return kb_builder.as_markup()



@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    kb = main_menu_keyboard()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PaySecure! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=kb
    )
    await state.clear()

@dp.callback_query(F.data.startswith("menu_"))
async def process_menu_callback(call: CallbackQuery, state: FSMContext):
    action = call.data[len("menu_"):]

    if action == "card":
        kb_strana = main_card_keyboard()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb_strana)

    elif action == "invoice":
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–æ–≤.\n1. –í–∞–ª—é—Ç–∞:")
        await state.set_state(Form.invoice_valuta)

    elif action == "question":
        await call.message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(Form.manager)

    elif action == "about":
        await call.message.answer(
            "PaySecure ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ —Ñ–∏–Ω—Ç–µ—Ö–∞.\n\n"
            "–û—Ñ–æ—Ä–º–ª—è–µ–º –∫–∞—Ä—Ç—ã, –ø–æ–º–æ–≥–∞–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤.\n\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: @Paysecure1\n"
            "Email: Paysecure2025@gmail.com"
        )

    elif action == "partner":
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n1. –ò–º—è:")
        await state.set_state(Form.partner_name)
    await call.answer()

@dp.callback_query(F.data.startswith("strana_"))
async def process_strana_callback(call: CallbackQuery, state: FSMContext):
    country = call.data[len("strana_"):]
    heart = main_feart_keyboard()
    if country != "other":
        country_name_map = {
            "turcian": "–¢—É—Ä—Ü–∏—è",
            "oae": "–û–ê–≠",
            "tadzhikistan": "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω",
        }
        country_text = country_name_map.get(country, country)
        await state.update_data(selected_country=country_text)

        await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É {country_text}")
        await call.message.answer("–£—Å–ª–æ–≤–∏—è –∫–∞—Ä—Ç—ã:", reply_markup=heart)
    else:
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:")
        await state.set_state(Form.strana_other)
    await call.answer()



@dp.callback_query(F.data.startswith("zayvka"))
async def process_strana_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country}")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await state.set_state(Form.strana_name)
    
    await call.answer()

@dp.message(Form.manager)
async def manager_sv(message: Message, state: FSMContext):
    await state.update_data(selected_manager=message.text)
    dataManager = await state.get_data()
    coun = dataManager.get("selected_manager", "–Ω–µ –∑–∞–¥–∞–Ω")
    await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {coun} –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    await state.clear()

    payload = {
        "manager": dataManager["selected_manager"],
        "username": "@" + message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/manager", json=payload) as resp:
            if resp.status == 200:
                await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ.")
    

@dp.message(Form.strana_name)
async def strana_telegram(message: Message, state: FSMContext):
    await state.update_data(selected_name=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ telegram:")
    await state.set_state(Form.strana_strana)

@dp.message(Form.strana_strana)
async def strana_fer2(message: Message, state: FSMContext):
    await state.update_data(selected_telegram=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:")
    await state.set_state(Form.strana_sv)

@dp.message(Form.strana_sv)
async def strana_sv(message: Message, state: FSMContext):
    await state.update_data(selected_sv=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(Form.strana_comm)

@dp.message(Form.strana_comm)
async def strana_comm(message: Message, state: FSMContext):
    await state.update_data(selected_comm=message.text)
    data = await state.get_data()
    await message.answer(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–°—Ç—Ä–∞–Ω–∞ –∫–∞—Ä—Ç—ã: {data['selected_country']}\n"
        f"–ò–º—è: {data['selected_name']}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º–º: {data['selected_telegram']}\n"
        f"–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data['selected_sv']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['selected_comm']}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    payload = {
        "strana_card": data["selected_country"],
        "name": data["selected_name"],
        "telegram": data["selected_telegram"],
        "sv": data["selected_sv"],
        "comm": data["selected_comm"],
    }

    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/karta", json=payload) as resp:
              await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

@dp.message(Form.strana_other)
async def strana_other(message: Message, state: FSMContext):
    await state.update_data(selected_country=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country}")
    heart = main_feart_keyboard()
    await message.answer("–£—Å–ª–æ–≤–∏—è –∫–∞—Ä—Ç—ã:", reply_markup=heart)

@dp.callback_query(F.data.startswith("service_"))
async def process_service_choice(call: CallbackQuery, state: FSMContext):
    service_id = int(call.data[len("service_"):])
    await state.update_data(service_id=service_id)

    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")


    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.waiting_for_name)
    await call.answer()

@dp.message(Form.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.waiting_for_phone)

@dp.message(Form.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Form.waiting_for_email)

@dp.message(Form.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:")
    await state.set_state(Form.waiting_for_inn)

@dp.message(Form.waiting_for_inn)
async def process_inn(message: Message, state: FSMContext):
    await state.update_data(inn=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
    await state.set_state(Form.waiting_for_comment)

@dp.message(Form.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(comment=comment)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@dp.message(Form.partner_name)
async def partner_name_handler(message: Message, state: FSMContext):
    await state.update_data(partner_name=message.text)
    await message.answer("2. –ì–æ—Ä–æ–¥:")
    await state.set_state(Form.partner_city)

@dp.message(Form.partner_city)
async def partner_city_handler(message: Message, state: FSMContext):
    await state.update_data(partner_city=message.text)
    await message.answer("3. –û–ø—ã—Ç:")
    await state.set_state(Form.partner_experience)

@dp.message(Form.partner_experience)
async def partner_experience_handler(message: Message, state: FSMContext):
    await state.update_data(partner_experience=message.text)
    await message.answer("4. –¢–µ–ª–µ–≥—Ä–∞–º–º:")
    await state.set_state(Form.partner_telegram)

@dp.message(Form.partner_telegram)
async def partner_telegram_handler(message: Message, state: FSMContext):
    await state.update_data(partner_telegram=message.text)
    data = await state.get_data()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞!\n\n"
        f"–ò–º—è: {data['partner_name']}\n"
        f"–ì–æ—Ä–æ–¥: {data['partner_city']}\n"
        f"–û–ø—ã—Ç: {data['partner_experience']}\n"
        f"Telegram: {data['partner_telegram']}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    payload = {
        "name": data["partner_name"],
        "city": data["partner_city"],
        "experience": data['partner_experience'],
        "telegram": data["partner_telegram"],
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/der", json=payload) as resp:
            if resp.status == 200:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ.")

    await state.clear()

@dp.message(Form.invoice_valuta)
async def process_invoice_valuta(message: Message, state: FSMContext):
    await state.update_data(valuta=message.text)
    await message.answer("2. –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(Form.invoice_strana)

@dp.message(Form.invoice_strana)
async def process_invoice_strana(message: Message, state: FSMContext):
    await state.update_data(strana=message.text)
    await message.answer("3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(Form.invoice_summa)

@dp.message(Form.invoice_summa)
async def process_invoice_summa(message: Message, state: FSMContext):
    await state.update_data(summa=message.text)
    await message.answer("4. –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–æ–π—Å:")
    await state.set_state(Form.invoice_screen)

@dp.message(Form.invoice_screen)
async def process_invoice_screen(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id 
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        await state.update_data(screen=file_url)
        await message.answer("–ò–Ω–≤–æ–π—Å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(Form.invoice_comm)
    else:
        await state.update_data(screen=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(Form.invoice_comm)

@dp.message(Form.invoice_comm)
async def process_invoice_comm(message: Message, state: FSMContext):
    await state.update_data(comm=message.text)
    data = await state.get_data()
    payload = {
        "valuta": data["valuta"],
        "strana": data["strana"],
        "summa": data['summa'],
        "screen": data["screen"],
        "comm": data["comm"],
        "username": "@" + message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ!")
    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/invoice", json=payload) as resp:
              await message.answer("–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@dp.callback_query(F.data == "zayvka")
async def zayvka(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏")
    await call.answer()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
