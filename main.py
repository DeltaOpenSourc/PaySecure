from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite
import aiohttp
from dotenv import load_dotenv  
load_dotenv()  
TOKEN = os.getenv('BOT_TOKEN') 


bot = Bot(token=TOKEN)
dp = Dispatcher()

async def CreateDB():
    query = """
    CREATE TABLE IF NOT EXISTS cards (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        conditions TEXT NOT NULL
    );
    """
    async with aiosqlite.connect("services.db") as db:
        await db.execute(query)
        await db.commit()


async def get_cards():
    async with aiosqlite.connect("services.db") as db:
        cursor = await db.execute("SELECT id, name FROM cards")
        cards = await cursor.fetchall()
        await cursor.close()
    return cards

async def cards_keyboard():
    cards = await get_cards()
    kb_builder = InlineKeyboardBuilder()
    for card_id, card_name in cards:
        kb_builder.button(text=card_name, callback_data=f"card_{card_id}")
    kb_builder.adjust(1)
    return kb_builder.as_markup()

class Form(StatesGroup):
    waiting_for_service_choice = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_inn = State()
    waiting_for_comment = State()

    partner_name = State()
    partner_city = State()
    partner_experience = State()
    partner_telegram = State()

    invoice_valuta = State()
    invoice_strana = State()
    invoice_summa = State()
    invoice_screen = State()
    invoice_comm = State()

    strana_other = State()
    strana_name = State()
    strana_telegram = State()
    strana_comm = State()
    strana_fer = State()
    strana_sv = State()
    strana_strana = State()

    manager = State()

    admin_waiting_for_country_name = State()
    admin_waiting_for_country_conditions = State()


MAIN_MENU_BUTTONS = [
    ("–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É", "menu_card"),
    ("–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", "menu_invoice"),
    ("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "menu_question"),
    ("–û –Ω–∞—Å", "menu_about"),
    ("–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", "menu_partner"),
]

MAIN_CARD_BUTTONS = [
    ("üáπüá∑ –¢—É—Ä—Ü–∏—è", "strana_turcian"),
    ("üá¶üá™ –û–ê–≠", "strana_oae"),
    ("üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", "strana_tadzhikistan"),
    ("–î—Ä—É–≥–∞—è", "strana_other"),
]

MAIN_FEART_BUTTONS = [
    ("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "zayvka"),
]

MAIN_ADMIN_BUTTONS = [
    ("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É-–∫–∞—Ä—Ç—É", "st_create"),
    ("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É-–∫–∞—Ä—Ç—É", "st_delete"),
]

def main_menu_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_MENU_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

def main_admin_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_ADMIN_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

def main_feart_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_FEART_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

def main_card_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()



@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    kb = main_menu_keyboard()
    await CreateDB()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ PaySecure ‚Äî –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüí± –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏\n  üí≥ –ü–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n  üìÑ –û–ø–ª–∞—á–∏–≤–∞—Ç—å –∏–Ω–≤–æ–π—Å—ã –≤ –ª—é–±—ã—Ö –≤–∞–ª—é—Ç–∞—Ö –ë—ã—Å—Ç—Ä–æ\n. –ù–∞–¥—ë–∂–Ω–æ. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.  \n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=kb,
        
    )
    await state.clear()

admin_ids = [5108832503]

@dp.message(Command(commands=["admin"]))
async def admin_add_card(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_admin_keyboard()
    )
@dp.callback_query(F.data.startswith("st_"))
async def process_admin_callback(call: CallbackQuery, state: FSMContext):
    action = call.data[len("st_"):]

    if action == "create":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã-–∫–∞—Ä—Ç—ã:")
        await state.set_state(Form.admin_waiting_for_country_name)

    elif action == "delete":
         cards = await get_cards()
         if not cards:
            await call.message.answer("–ù–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await call.answer()
            return

         kb_builder = InlineKeyboardBuilder()
         for card_id, card_name in cards:
             kb_builder.button(text=card_name, callback_data=f"admin_delete_{card_id}")
         kb_builder.adjust(1)
         await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_builder.as_markup())

    await call.answer()


@dp.callback_query(F.data.startswith("admin_delete_"))
async def admin_delete_card_callback(call: CallbackQuery):
    card_id_str = call.data[len("admin_delete_"):]
    card_id = int(card_id_str)

    async with aiosqlite.connect("services.db") as db:
        cursor = await db.execute("SELECT name FROM cards WHERE id = ?", (card_id,))
        row = await cursor.fetchone()
        await cursor.close()
        card_name = row[0]

        await db.execute("DELETE FROM cards WHERE id = ?", (card_id,))
        await db.commit()

    await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∞-–∫–∞—Ä—Ç–∞ '{card_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    await call.answer()


@dp.message(Form.admin_waiting_for_country_name)
async def admin_country_name_entered(message: Message, state: FSMContext):
    country_name = message.text.strip()
    await state.update_data(admin_country_name=country_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω—ã-–∫–∞—Ä—Ç—ã:")
    await state.set_state(Form.admin_waiting_for_country_conditions)

@dp.message(Form.admin_waiting_for_country_conditions)
async def admin_country_conditions_entered(message: Message, state: FSMContext):
    conditions = message.text.strip()
    data = await state.get_data()
    country_name = data.get("admin_country_name")

    async with aiosqlite.connect("services.db") as db:
        await db.execute(
            "INSERT INTO cards (name, conditions) VALUES (?, ?)",
            (country_name, conditions)
        )
        await db.commit()

    await message.answer(f"–°—Ç—Ä–∞–Ω–∞-–∫–∞—Ä—Ç–∞ '{country_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@dp.callback_query(F.data.startswith("menu_"))
async def process_menu_callback(call: CallbackQuery, state: FSMContext):
    action = call.data[len("menu_"):]

    if action == "card":
        cards_create = await cards_keyboard()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=cards_create)

    elif action == "invoice":
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–æ–≤.\n1. –í–∞–ª—é—Ç–∞:")
        await state.set_state(Form.invoice_valuta)

    elif action == "question":
        await call.message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(Form.manager)

    elif action == "about":
        await call.message.answer(
            "PaySecure ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –º–∏—Ä–µ —Ñ–∏–Ω—Ç–µ—Ö–∞.\n\n"
            "–û—Ñ–æ—Ä–º–ª—è–µ–º –∫–∞—Ä—Ç—ã, –ø–æ–º–æ–≥–∞–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤.\n\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: @admin_telegram\n"
            "Email: Paysecure2025@gmail.com"
        )

    elif action == "partner":
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n1. –ò–º—è:")
        await state.set_state(Form.partner_name)
    await call.answer()

@dp.callback_query(F.data.startswith("card_"))
async def process_strana_callback(call: CallbackQuery, state: FSMContext):
    country = call.data[len("card_"):]
    heart = main_feart_keyboard()
    async with aiosqlite.connect("services.db") as db:
        cursor = await db.execute("SELECT name FROM cards WHERE id = ?", (country,))
        row = await cursor.fetchone()
        await cursor.close()
        card_name = row[0]
    await state.update_data(selected_country=card_name)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É {card_name}")

    async with aiosqlite.connect("services.db") as db_one:
        cursor_one = await db_one.execute("SELECT conditions FROM cards WHERE id = ?", (country,))
        row_one = await cursor_one.fetchone()
        await cursor_one.close()
        card_name_one = row_one[0]

    await call.message.answer(f"–£—Å–ª–æ–≤–∏—è –∫–∞—Ä—Ç—ã: {card_name_one}", reply_markup=heart)
    await call.answer()



@dp.callback_query(F.data.startswith("zayvka"))
async def process_strana_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country}")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await state.set_state(Form.strana_name)
    
    await call.answer()

@dp.message(Form.manager)
async def manager_sv(message: Message, state: FSMContext):
    await state.update_data(selected_manager=message.text)
    dataManager = await state.get_data()
    coun = dataManager.get("selected_manager", "–Ω–µ –∑–∞–¥–∞–Ω")
    await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: '{coun}' –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    await state.clear()

    payload = {
        "manager": dataManager["selected_manager"],
        "username": "@" + message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/manager", json=payload) as resp:
            if resp.status == 200:
                await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ.")
    

@dp.message(Form.strana_name)
async def strana_telegram(message: Message, state: FSMContext):
    await state.update_data(selected_name=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ telegram:")
    await state.set_state(Form.strana_telegram)

@dp.message(Form.strana_telegram)
async def strana_fer(message: Message, state: FSMContext):
    await state.update_data(selected_telegram=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:")
    await state.set_state(Form.strana_strana)

@dp.message(Form.strana_strana)
async def strana_fer(message: Message, state: FSMContext):
    await state.update_data(selected_strana=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:")
    await state.set_state(Form.strana_sv)

@dp.message(Form.strana_sv)
async def strana_sv(message: Message, state: FSMContext):
    await state.update_data(selected_sv=message.text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(Form.strana_comm)

@dp.message(Form.strana_comm)
async def strana_comm(message: Message, state: FSMContext):
    await state.update_data(selected_comm=message.text)
    data = await state.get_data()
    await message.answer(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–°—Ç—Ä–∞–Ω–∞ –∫–∞—Ä—Ç—ã: {data['selected_country']}\n"
        f"–ò–º—è: {data['selected_name']}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º–º: {data['selected_telegram']}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data['selected_strana']}\n"
        f"–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data['selected_sv']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['selected_comm']}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    payload = {
        "strana_card": data["selected_country"],
        "name": data["selected_name"],
        "telegram": data["selected_telegram"],
        "strana": data['selected_strana'],
        "sv": data["selected_sv"],
        "comm": data["selected_comm"],
    }

    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/karta", json=payload) as resp:
              await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

@dp.message(Form.strana_other)
async def strana_other(message: Message, state: FSMContext):
    await state.update_data(selected_country=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É: {country}")
    heart = main_feart_keyboard()
    await message.answer("–£—Å–ª–æ–≤–∏—è –∫–∞—Ä—Ç—ã:", reply_markup=heart)

@dp.callback_query(F.data.startswith("service_"))
async def process_service_choice(call: CallbackQuery, state: FSMContext):
    service_id = int(call.data[len("service_"):])
    await state.update_data(service_id=service_id)

    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")


    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.waiting_for_name)
    await call.answer()

@dp.message(Form.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.waiting_for_phone)

@dp.message(Form.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Form.waiting_for_email)

@dp.message(Form.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:")
    await state.set_state(Form.waiting_for_inn)

@dp.message(Form.waiting_for_inn)
async def process_inn(message: Message, state: FSMContext):
    await state.update_data(inn=message.text)
    data = await state.get_data()
    country = data.get("selected_country", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞: {country}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
    await state.set_state(Form.waiting_for_comment)

@dp.message(Form.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(comment=comment)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@dp.message(Form.partner_name)
async def partner_name_handler(message: Message, state: FSMContext):
    await state.update_data(partner_name=message.text)
    await message.answer("2. –ì–æ—Ä–æ–¥:")
    await state.set_state(Form.partner_city)

@dp.message(Form.partner_city)
async def partner_city_handler(message: Message, state: FSMContext):
    await state.update_data(partner_city=message.text)
    await message.answer("3. –û–ø—ã—Ç:")
    await state.set_state(Form.partner_experience)

@dp.message(Form.partner_experience)
async def partner_experience_handler(message: Message, state: FSMContext):
    await state.update_data(partner_experience=message.text)
    await message.answer("4. –¢–µ–ª–µ–≥—Ä–∞–º–º:")
    await state.set_state(Form.partner_telegram)

@dp.message(Form.partner_telegram)
async def partner_telegram_handler(message: Message, state: FSMContext):
    await state.update_data(partner_telegram=message.text)
    data = await state.get_data()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞!\n\n"
        f"–ò–º—è: {data['partner_name']}\n"
        f"–ì–æ—Ä–æ–¥: {data['partner_city']}\n"
        f"–û–ø—ã—Ç: {data['partner_experience']}\n"
        f"Telegram: {data['partner_telegram']}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    payload = {
        "name": data["partner_name"],
        "city": data["partner_city"],
        "experience": data['partner_experience'],
        "telegram": data["partner_telegram"],
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/der", json=payload) as resp:
            if resp.status == 200:
                await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ.")

    await state.clear()

@dp.message(Form.invoice_valuta)
async def process_invoice_valuta(message: Message, state: FSMContext):
    await state.update_data(valuta=message.text)
    await message.answer("2. –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(Form.invoice_strana)

@dp.message(Form.invoice_strana)
async def process_invoice_strana(message: Message, state: FSMContext):
    await state.update_data(strana=message.text)
    await message.answer("3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(Form.invoice_summa)

@dp.message(Form.invoice_summa)
async def process_invoice_summa(message: Message, state: FSMContext):
    await state.update_data(summa=message.text)
    await message.answer("4. –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–æ–π—Å:")
    await state.set_state(Form.invoice_screen)

@dp.message(Form.invoice_screen)
async def process_invoice_screen(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id 
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        await state.update_data(screen=file_url)
        await message.answer("–ò–Ω–≤–æ–π—Å –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(Form.invoice_comm)
    else:
        await state.update_data(screen=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(Form.invoice_comm)

@dp.message(Form.invoice_comm)
async def process_invoice_comm(message: Message, state: FSMContext):
    await state.update_data(comm=message.text)
    data = await state.get_data()
    payload = {
        "valuta": data["valuta"],
        "strana": data["strana"],
        "summa": data['summa'],
        "screen": data["screen"],
        "comm": data["comm"],
        "username": "@" + message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ!")
    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://nexthe-beta.vercel.app/api/invoice", json=payload) as resp:
              await message.answer("–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@dp.callback_query(F.data == "zayvka")
async def zayvka(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏")
    await call.answer()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
